name: Flutter CI/CD Pipeline

on:
  push:
    branches: [git_hub_action_test,develop]
  pull_request:
    branches: [git_hub_action_test,develop]

jobs:
  build:
    runs-on: macos-latest

    env:
      ANDROID: ${{ secrets.ANDROID_HOME }}
      ANDROID_SDK: ${{ secrets.ANDROID_HOME }}
      ARCHIVE_DIR: untracked-files-archive

    steps:
      # 1 ────────────────────────────────────── CHECKOUT
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      # 2 ────────────────────────────────────── FLUTTER SDK
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'

      # 3 ────────────────────────────────────── ENV FILE
      - name: Create .env file
        run: |
          echo "DEV_API_BASE_URL=${{ secrets.DEV_API_BASE_URL }}"  > .env
          echo "STAGE_API_BASE_URL=${{ secrets.STAGE_API_BASE_URL }}" >> .env
          echo "PROD_API_BASE_URL=${{ secrets.PROD_API_BASE_URL }}"  >> .env

      # 4 ────────────────────────────────────── ANDROID + COMMON BUILD
      - name: Flutter clean
        run: flutter clean

      - name: Pub get & code-gen
        run: |
          flutter pub get
          dart run build_runner build --delete-conflicting-outputs

#      - name: Run unit tests
#        run: flutter test

      - name: Install Flutterfire CLI
        run: |
          dart pub global activate flutterfire_cli
#          echo "::add-path::${HOME}/.pub-cache/bin"

#      #5 Setup Keystore
#      - name: Decode Keystore
#        run: |
#          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
#
#      - name: Create key.properties
#        run: |
#          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
#          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
#          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
#          echo "storeFile=keystore.jks" >> android/key.properties
#
#      - name: Build Android APKs
#        run: |
#          flutter build apk --flavor dev   --dart-define=APP_FLAVOR=DEV --release
#          flutter build apk --flavor stage --dart-define=APP_FLAVOR=STAGE --release

#        #7 Building App Bundle (aab)
#      - name: Build appBundle
#        run: |
#          flutter build appbundle --release --flavor dev
#          flutter build appbundle --release --flavor stage

      # 5 ────────────────────────────────────── PREPARE iOS TOOLCHAIN
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
#      - name: Select Xcode 15.4
#        run: sudo xcode-select -s /Applications/Xcode_15.4.app

      - name: Fresh CocoaPods install
        run: |
          sudo gem install cocoapods
          cd ios
          rm -rf Pods Podfile.lock
          pod cache clean --all
          pod repo update      # wipe old pods
          pod install           # regenerate with current Firebase / Swift 5.9
          cd ..

      # 6 ────────────────────────────────────── iOS BUILDS

          # Decode cert/profiles for dev flavor (repeat for stage/prod)
      - name: Decode Certificates & Profiles (dev)
        run: |
          echo "${{ secrets.P12_BASE64 }}" | base64 --decode > certificate.p12
          echo "${{ secrets.P12_PASSWORD }}" > p12_password.txt
          echo "${{ secrets.PROFILE_DEV_BASE64 }}" | base64 --decode > profile_dev.mobileprovision
          echo "${{ secrets.EXPORTOPTIONS_DEV_BASE64 }}" | base64 --decode > ExportOptionsDev.plist

      - name: Set up Keychain & Import Certificate
        run: |
          security create-keychain -p "ci_password" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "ci_password" build.keychain
          security import certificate.p12 -k build.keychain -P $(cat p12_password.txt) -A
          security set-key-partition-list -S apple-tool:,apple: -k "ci_password" build.keychain

      - name: Install Provisioning Profile (dev)
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile_dev.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      # Build for dev flavor
      - name: Build IPA (dev)
        run: flutter build ipa --flavor dev --export-options-plist=ExportOptionsDev.plist --release

      # --- Build for stage ---
      - name: Install Provisioning Profile (stage)
        run: |
          echo "${{ secrets.PROFILE_STAGE_BASE64 }}" | base64 --decode > profile_stage.mobileprovision
          cp profile_stage.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "${{ secrets.EXPORTOPTIONS_STAGE_BASE64 }}" | base64 --decode > ExportOptionsStage.plist

      - name: Build IPA (stage)
        run: flutter build ipa --flavor stage --export-options-plist=ExportOptionsStage.plist --release

      # --- Build for prod ---
      - name: Install Provisioning Profile (prod)
        run: |
          echo "${{ secrets.PROFILE_PROD_BASE64 }}" | base64 --decode > profile_prod.mobileprovision
          cp profile_prod.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "${{ secrets.EXPORTOPTIONS_PROD_BASE64 }}" | base64 --decode > ExportOptionsProd.plist

      - name: Build IPA (prod)
        run: flutter build ipa --flavor prod --export-options-plist=ExportOptionsProd.plist --release

#      - name: Build iOS (dev)
#        run: flutter build ipa --flavor dev --dart-define=APP_FLAVOR=DEV --no-codesign
#
#      - name: Build iOS (stage)
#        run: flutter build ipa --flavor stage --dart-define=APP_FLAVOR=STAGE --no-codesign

      # 7 ────────────────────────────────────── ARTIFACTS
#      - name: Archive untracked files
#        run: |
#          mkdir -p $ARCHIVE_DIR
#          untracked_files=$(git status --porcelain | grep -E "^(\\?\\?| M|A )" | cut -c4-)
#          if [ -n "$untracked_files" ]; then
#            echo "$untracked_files" | while IFS= read -r file; do
#              cp --parents -- "./$file" "$ARCHIVE_DIR/"
#            done
#            tar -czf untracked-files.tar.gz -C $ARCHIVE_DIR .
#          fi
#      - name: Archive untracked files
#        run: |
#          set -eu
#
#          mkdir -p "$ARCHIVE_DIR"
#
#          git status --porcelain | grep -E "^(\\?\\?| M|A )" | cut -c4- | while IFS= read -r file; do
#            # Skip blank lines (defensive)
#            [ -z "$file" ] && continue
#            # Defensive: Skip non-existent files
#            [ ! -e "$file" ] && continue
#            # Print to debug which files are being copied
#            echo "Copying file: $file"
#            cp --parents -- "./$file" "$ARCHIVE_DIR/"
#          done
#
#          tar -czf untracked-files.tar.gz -C "$ARCHIVE_DIR" .

#      - name: Archive failed golden images
#        run: |
#          if [ -d "test/failures" ]; then
#            mkdir -p failed-goldens-archive
#            find test/failures -type f -exec cp --parents {} failed-goldens-archive/ \;
#            tar -czf failed-golden-images.tar.gz -C failed-goldens-archive .
#          fi
#
#      - name: Upload misc artifacts
#        uses: actions/upload-artifact@v4.6.2
#        with:
#          name: auxiliary-files
#          path: |
#            untracked-files.tar.gz
#            failed-golden-images.tar.gz

      - name: Upload APK (dev)
        if: success()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: apk-dev-release
          path: build/app/outputs/flutter-apk/app-dev-release.apk

      - name: Upload APK (stage)
        if: success()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: apk-stage-release
          path: build/app/outputs/flutter-apk/app-stage-release.apk

      - name: Upload IPA (dev)
        if: success()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ipa-dev-release
          path: build/ios/ipa/*dev*.ipa

      - name: Upload IPA (stage)
        if: success()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ipa-stage-release
          path: build/ios/ipa/*stage*.ipa

      - name: Upload IPA (prod)
        if: success()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ipa-prod-release
          path: build/ios/ipa/*prod*.ipa