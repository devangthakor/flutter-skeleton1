name: Flutter CI/CD Pipeline

on:
  push:
    branches: [git_hub_action_test,develop]
  pull_request:
    branches: [git_hub_action_test,develop]

jobs:
  build:
    runs-on: macos-latest

    env:
      ANDROID: ${{ secrets.ANDROID_HOME }}
      ANDROID_SDK: ${{ secrets.ANDROID_HOME }}
      ARCHIVE_DIR: untracked-files-archive

    steps:
      # 1 ────────────────────────────────────── CHECKOUT
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      # 2 ────────────────────────────────────── FLUTTER SDK
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'

      # 3 ────────────────────────────────────── ENV FILE
      - name: Create .env file
        run: |
          echo "DEV_API_BASE_URL=${{ secrets.DEV_API_BASE_URL }}"  > .env
          echo "STAGE_API_BASE_URL=${{ secrets.STAGE_API_BASE_URL }}" >> .env
          echo "PROD_API_BASE_URL=${{ secrets.PROD_API_BASE_URL }}"  >> .env

      # 4 ────────────────────────────────────── ANDROID + COMMON BUILD
      - name: Flutter clean
        run: flutter clean

      - name: Pub get & code-gen
        run: |
          flutter pub get
          dart run build_runner build --delete-conflicting-outputs

      - name: Run unit tests
        run: flutter test

      - name: Install Flutterfire CLI
        run: |
          dart pub global activate flutterfire_cli
#          echo "::add-path::${HOME}/.pub-cache/bin"

      - name: Build Android APKs
        run: |
          flutter build apk --flavor dev   --dart-define=APP_FLAVOR=DEV
          flutter build apk --flavor stage --dart-define=APP_FLAVOR=STAGE

      # 5 ────────────────────────────────────── PREPARE iOS TOOLCHAIN
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
#      - name: Select Xcode 15.4
#        run: sudo xcode-select -s /Applications/Xcode_15.4.app

      - name: Fresh CocoaPods install
        run: |
          sudo gem install cocoapods
          cd ios
          rm -rf Pods Podfile.lock
          pod cache clean --all
          pod repo update      # wipe old pods
          pod install           # regenerate with current Firebase / Swift 5.9
          cd ..

      # 6 ────────────────────────────────────── iOS BUILDS
      - name: Build iOS (dev)
        run: flutter build ipa --flavor dev --dart-define=APP_FLAVOR=DEV --no-codesign

      - name: Build iOS (stage)
        run: flutter build ipa --flavor stage --dart-define=APP_FLAVOR=STAGE --no-codesign

      # 7 ────────────────────────────────────── ARTIFACTS
      - name: Archive untracked files
        run: |
          mkdir -p $ARCHIVE_DIR
          untracked_files=$(git status --porcelain | grep -E "^(\\?\\?| M|A )" | cut -c4-)
          if [ -n "$untracked_files" ]; then
            echo "$untracked_files" | while IFS= read -r file; do
              cp --parents "$file" $ARCHIVE_DIR/
            done
            tar -czf untracked-files.tar.gz -C $ARCHIVE_DIR .
          fi

      - name: Archive failed golden images
        run: |
          if [ -d "test/failures" ]; then
            mkdir -p failed-goldens-archive
            find test/failures -type f -exec cp --parents {} failed-goldens-archive/ \;
            tar -czf failed-golden-images.tar.gz -C failed-goldens-archive .
          fi

      - name: Upload misc artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: auxiliary-files
          path: |
            untracked-files.tar.gz
            failed-golden-images.tar.gz

      - name: Upload APK (dev)
        if: success()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: apk-dev-release
          path: build/app/outputs/flutter-apk/app-dev-release.apk

      - name: Upload APK (stage)
        if: success()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: apk-stage-release
          path: build/app/outputs/flutter-apk/app-stage-release.apk

#name: Flutter CI/CD Pipeline
#
#on:
#  push:
#    branches:
#      - git_hub_action_test
#  pull_request:
#    branches:
#      - git_hub_action_test
#
#jobs:
#  build:
#    runs-on: macos-latest
#    env:
#      ANDROID: ${{ secrets.ANDROID_HOME }}
##      PATH: ${{ secrets.ANDROID_HOME }}/platform-tools:${{ secrets.ANDROID_HOME }}/cmdline-tools/latest/bin:${{ secrets.ANDROID_HOME }}/cmdline-tools/latest:$PATH
#      ANDROID_SDK: ${{ secrets.ANDROID_HOME }}
#      ARCHIVE_DIR: untracked-files-archive
#
#    steps:
#
#      - name: Checkout code
#        uses: actions/checkout@v2
#        with:
#          ref: ${{ github.event.pull_request.head.ref }}
#
#      - name: Set up Flutter
#        uses: subosito/flutter-action@v2
#        with:
#          flutter-version: '3.29.3'
#
#      - name: Create .env file
#        run: |
#          echo "DEV_API_BASE_URL=${{ secrets.DEV_API_BASE_URL }}" > .env
#          echo "STAGE_API_BASE_URL=${{ secrets.STAGE_API_BASE_URL }}" >> .env
#          echo "PROD_API_BASE_URL=${{ secrets.PROD_API_BASE_URL }}" >> .env
#
#      - name: Flutter Build and Test
#        run: |
#          flutter clean
#          flutter pub get
#          dart run build_runner build --delete-conflicting-outputs
#          flutter test
#          flutter build apk --flavor dev --dart-define=APP_FLAVOR=DEV
#          flutter build apk --flavor stage --dart-define=APP_FLAVOR=STAGE
#
#      - name: Select Xcode version
#        run: sudo xcode-select -s /Applications/Xcode_15.4.app
#
#      - name: Install CocoaPods dependencies
#        run: |
#          sudo gem install cocoapods
#          cd ios
#          pod install
#          cd ..
#
#      - name: Flutter Build iOS (dev)
#        run: flutter build ios --flavor dev --dart-define=APP_FLAVOR=DEV --no-codesign
#
#      - name: Flutter Build iOS (stage)
#        run: flutter build ios --flavor stage --dart-define=APP_FLAVOR=STAGE --no-codesign
#
#      - name: Archive untracked files
#        run: |
#          mkdir -p $ARCHIVE_DIR
#          untracked_files=$(git status --porcelain | grep -E "^?|^ M|^A " | cut -c4-)
#          if [ -n "$untracked_files" ]; then
#            echo "Found untracked files"
#            echo "$untracked_files" | while IFS= read -r file; do
#              cp --parents "$file" $ARCHIVE_DIR/
#            done
#            tar -czf untracked-files.tar.gz -C $ARCHIVE_DIR .
#          fi
#
#      - name: Archive failed golden images
#        run: |
#          if [ -d "test/failures" ]; then
#            mkdir -p failed-goldens-archive
#            find test/failures -type f -exec cp --parents {} failed-goldens-archive/ \;
#            tar -czf failed-golden-images.tar.gz -C failed-goldens-archive .
#          fi
#
#      - name: Publish artifacts
#        uses: actions/upload-artifact@v4.6.2
#        with:
#          name: untracked-files
#          path: untracked-files.tar.gz
#
#      - name: Publish APKs
#        if: success()
#        uses: actions/upload-artifact@v4.6.2
#        with:
#          name: apk-dev-release
#          path: build/app/outputs/flutter-apk/app-dev-release.apk
#
#      - name: Publish APKs
#        if: success()
#        uses: actions/upload-artifact@v4.6.2
#        with:
#          name: apk-stage-release
#          path: build/app/outputs/flutter-apk/app-stage-release.apk
